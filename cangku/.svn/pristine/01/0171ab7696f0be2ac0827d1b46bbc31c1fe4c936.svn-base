package com.guantang.cangkuonline.activity;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import android.R.integer;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.guantang.cangkuonline.R;
import com.guantang.cangkuonline.TagFlowLayout.FlowLayout;
import com.guantang.cangkuonline.TagFlowLayout.TagAdapter;
import com.guantang.cangkuonline.TagFlowLayout.TagFlowLayout;
import com.guantang.cangkuonline.adapter.MyDJAdapter;
import com.guantang.cangkuonline.database.DataBaseHelper;
import com.guantang.cangkuonline.database.DataBaseOperateMethod;
import com.guantang.cangkuonline.helper.RightsHelper;
import com.guantang.cangkuonline.shareprefence.ShareprefenceBean;
import com.guantang.cangkuonline.swipemenulistview.SwipeMenu;
import com.guantang.cangkuonline.swipemenulistview.SwipeMenuCreator;
import com.guantang.cangkuonline.swipemenulistview.SwipeMenuItem;
import com.guantang.cangkuonline.swipemenulistview.SwipeMenuListView;
import com.guantang.cangkuonline.swipemenulistview.SwipeMenuListView.OnMenuItemClickListener;
import com.guantang.cangkuonline.webservice.WebserviceHelper;
import com.guantang.cangkuonline.webservice.WebserviceImport;

public class History_DJActivity extends Activity implements OnClickListener,
		OnItemClickListener, OnItemSelectedListener, OnMenuItemClickListener {
	private Spinner stateSpinner;
	private ImageButton backImgBtn, searchImgBtn;
	private TextView allupLoadBtn;
	private TextView cancelTextView,todayTextview,promptTextView;
	private TagFlowLayout showTagFlowLayout;
	private SwipeMenuListView todayListView;
	private List<Map<String, Object>> DJlist = new ArrayList<Map<String, Object>>();
	private List<Map<String, Object>> mylist = new ArrayList<Map<String, Object>>();
	private SimpleDateFormat formatter;
	private String dt1, dt2;
	private DataBaseOperateMethod dm_op = new DataBaseOperateMethod(this);
	private String[] str1 = { DataBaseHelper.HPM_ID, DataBaseHelper.MVDH,
			DataBaseHelper.MVDT, DataBaseHelper.Details, DataBaseHelper.mType,
			DataBaseHelper.Details, DataBaseHelper.JBR, DataBaseHelper.DWName,
			DataBaseHelper.actType, DataBaseHelper.CKMC,DataBaseHelper.CKID,
			DataBaseHelper.DepName, DataBaseHelper.Lrr, DataBaseHelper.Lrsj,
			DataBaseHelper.DJType };
	
	private String[] strs1 = { DataBaseHelper.MVDH, DataBaseHelper.MVDT,
			DataBaseHelper.DWName, DataBaseHelper.JBR, DataBaseHelper.BZ,
			DataBaseHelper.mType, DataBaseHelper.actType,
			DataBaseHelper.DepName, DataBaseHelper.DepID, DataBaseHelper.CKMC,
			DataBaseHelper.CKID, DataBaseHelper.Lrr, DataBaseHelper.Lrsj,
			DataBaseHelper.DWID, DataBaseHelper.Details, DataBaseHelper.HPzj };
	private String[] strs2 = { "mvdh", "mvdt", "dwName", "jbr", "bz", "mType",
			"actType", "depName", "depId", "ckName", "ckid", "lrr", "lrsj",
			"dwid", "hpDetails", "hpzjz" };
	private String[] strs3 = { DataBaseHelper.HPID, DataBaseHelper.MVDDATE,
			DataBaseHelper.MSL, DataBaseHelper.MVDType, DataBaseHelper.DH,
			DataBaseHelper.MVDirect, DataBaseHelper.DJ, DataBaseHelper.ZJ,
			DataBaseHelper.MVType, DataBaseHelper.CKID, DataBaseHelper.BTKC,
			DataBaseHelper.ATKC };
	private String[] strs4 = { "hpid", "mvddt", "msl", "mdType", "mvddh",
			"mddirect", "dj", "zj", "dactType", "ckid", "Btkc", "Atkc" };
	private String[] items = { "不限", "未上传", "已上传","未完成" };
	private String Spinner_str="不限";
	private ArrayAdapter<String> Spn_adapter;
	private MyDJAdapter DJadapter;
	private ProgressDialog dialog1,allLoaDialog;
	private ExecutorService cacheThreadPool = Executors.newCachedThreadPool();
	private String uploadDJID="",dh="",dacttype="";
	private int op_type=1,ckid=-1;
	private SharedPreferences mSharedPreferences;
	private TagAdapter<String> mTagAdapter;
	private List<String> conditionList = new ArrayList<String>();
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO 自动生成的方法存根
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_histroy_dj);
		mSharedPreferences = getSharedPreferences(ShareprefenceBean.SHAREPREFENCE_NAME, Context.MODE_PRIVATE);
		initcontrol();
		init();
	}
	
	public void initcontrol() {
		stateSpinner = (Spinner) findViewById(R.id.state);
		backImgBtn = (ImageButton) findViewById(R.id.back);
		searchImgBtn = (ImageButton) findViewById(R.id.search);
		showTagFlowLayout = (TagFlowLayout) findViewById(R.id.timetext);
		cancelTextView = (TextView) findViewById(R.id.cancel);
		todayTextview = (TextView) findViewById(R.id.todaytext);
		todayListView = (SwipeMenuListView) findViewById(R.id.todaylist);
		promptTextView = (TextView) findViewById(R.id.Prompt);
		allupLoadBtn = (TextView) findViewById(R.id.allupLoadBtn);
		final LayoutInflater inflater = LayoutInflater.from(this);
		mTagAdapter = new TagAdapter<String>() {
			
			@Override
			public View getView(FlowLayout parent, int position, String t) {
				// TODO 自动生成的方法存根
				TextView tv =(TextView) inflater.inflate(R.layout.tv,showTagFlowLayout, false);
				tv.setText(t);
				return tv;
			}
		};
		showTagFlowLayout.setAdapter(mTagAdapter);
		
		SwipeMenuCreator creator = new SwipeMenuCreator() {
			@Override
			public void create(SwipeMenu menu) {

				switch (menu.getViewType()) {
				case 1://已上传单据对应的SwipeMenuItem
					createDeleteMenu(menu);
					break;
				case -1://未上传单据对应的SwipeMenuItem
					createUpLoadMenu(menu);
					createDeleteMenu(menu);
					break;
				case 0://未完成单据对应的SwipeMenuItem
					createFinishMenu(menu);
					createDeleteMenu(menu);
					break;
				}

			}
		};
		
		todayListView.setMenuCreator(creator);
		todayListView.setOnMenuItemClickListener(this);
		backImgBtn.setOnClickListener(this);
		searchImgBtn.setOnClickListener(this);
		todayListView.setOnItemClickListener(this);
		stateSpinner.setOnItemSelectedListener(this);
		allupLoadBtn.setOnClickListener(this);
		cacheThreadPool.execute(new Runnable() {
			
			@Override
			public void run() {
				// TODO 自动生成的方法存根
				try {
					Thread.sleep(5000);
					viewgoneHandler.sendEmptyMessage(0);
				} catch (InterruptedException e) {
					// TODO 自动生成的 catch 块
					e.printStackTrace();
				}
			}
		});
	}

	public void init() {
		formatter = new SimpleDateFormat("yyyy-MM-dd");
		String date = formatter.format(new Date(System.currentTimeMillis()));
		dt1 = date;
		dt2 = date;
		
		Spn_adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, items);
		stateSpinner.setAdapter(Spn_adapter);
		
		Intent intent = getIntent();
		if(intent.getBooleanExtra("todayDJ", false)){
			if(intent.getIntExtra("todayop_type", 1)==1){
				DJlist = dm_op.search_DJ(" where  " + DataBaseHelper.MVDT + "='"
						+ date  + "' and "+DataBaseHelper.mType+"='1' and "+DataBaseHelper.HPM_ID+"="+intent.getIntExtra("ckid", -1)+" order by lrsj desc ", str1);
				conditionList.clear();
				conditionList.add(dt1 + "至" + dt2);
				conditionList.add("仓库:不限");
				conditionList.add("入库单据");
				mTagAdapter.setData(conditionList);
			}else if(intent.getIntExtra("todayop_type", 1)==2){
				DJlist = dm_op.search_DJ(" where  " + DataBaseHelper.MVDT + "='"
						+ date + "' and "+DataBaseHelper.mType+"='2' and "+DataBaseHelper.HPM_ID+"="+intent.getIntExtra("ckid", -1)+" order by lrsj desc ", str1);
				conditionList.clear();
				conditionList.add(dt1 + "至" + dt2);
				conditionList.add("仓库:不限");
				conditionList.add("出库单据");
				mTagAdapter.setData(conditionList);
			}
		}else{
			DJlist = dm_op.search_DJ(" where  " + DataBaseHelper.MVDT + ">='"
					+ date + "'  and " + DataBaseHelper.MVDT + "<='"
					+ date + "' order by lrsj desc ", str1);
			conditionList.clear();
			conditionList.add(dt1 + "至" + dt2);
			conditionList.add("仓库:不限");
			mTagAdapter.setData(conditionList);
		}
		DJadapter = new MyDJAdapter(this);
		todayListView.setAdapter(DJadapter);
		//将一个集合放入到另外一个集合的尾部
		mylist.addAll(DJlist);
		DJadapter.setData(mylist);
		if (mylist.size() > 0) {
			todayTextview.setVisibility(View.GONE);
		} else {
			todayTextview.setVisibility(View.VISIBLE);
		}
	}
	
	public void createUpLoadMenu(SwipeMenu menu){
		SwipeMenuItem UploadItem = new SwipeMenuItem(getApplicationContext());
		// set item background
		UploadItem.setBackground(getResources().getDrawable(R.color.grey));
		// set item width
		UploadItem.setWidth(dp2px(90));
		//
		UploadItem.setTitle("上传");
		// set item title fontsize
		UploadItem.setTitleSize(18);
		// set item title font color
		UploadItem.setTitleColor(Color.WHITE);
		// set a icon
		UploadItem.setIcon(R.drawable.gpc);
		// add to menu
		menu.addMenuItem(UploadItem);
	}
	public void createDeleteMenu(SwipeMenu menu){
		// create "delete" item
		SwipeMenuItem deleteItem = new SwipeMenuItem(
				getApplicationContext());
		// set item background
		deleteItem.setBackground(new ColorDrawable(Color.rgb(0xF9,
				0x3F, 0x25)));
		// set item width
		deleteItem.setWidth(dp2px(90));
		// set a icon
		deleteItem.setIcon(R.drawable.ic_delete);
		// add to menu
		menu.addMenuItem(deleteItem);
	}
	public void createFinishMenu(SwipeMenu menu){
		SwipeMenuItem FinishItem = new SwipeMenuItem(
				getApplicationContext());
		// set item background
		FinishItem.setBackground(new ColorDrawable(Color.rgb(0xE5, 0xE0,
				0x3F)));
		// set item width
		FinishItem.setWidth(dp2px(90));
		// set a icon
		FinishItem.setTitle("完成单据");
		FinishItem.setTitleSize(18);
		FinishItem.setTitleColor(Color.WHITE);
		// add to menu
		menu.addMenuItem(FinishItem);
	}
	@Override
	public void onClick(View v) {
		// TODO 自动生成的方法存根
		Intent intent = new Intent();
		switch (v.getId()) {
		case R.id.back:
			finish();
			break;
		case R.id.search:
			intent.setClass(this, DJ_filterActivity.class);
			startActivityForResult(intent, 1);
		case R.id.allupLoadBtn:
			if(WebserviceImport.isOpenNetwork(this)){
				Iterator<Map<String, Object>> iterator = DJlist.iterator();
				List<Map<String, Object>> littleList = new ArrayList<Map<String,Object>>();
				while(iterator.hasNext()){
					Map<String, Object> map = iterator.next();
					if(Integer.parseInt(map.get(DataBaseHelper.DJType).toString()) == -1){
						littleList.add(map);
					}
				}
				allLoaDialog = new ProgressDialog(this);
				allLoaDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
				allLoaDialog.setTitle("正在上传按条件筛选的单据");
				allLoaDialog.setMax(littleList.size());
				allLoaDialog.setProgress(0);
				allLoaDialog.setIndeterminate(false); 
				allLoaDialog.setIndeterminate(false);
				allLoaDialog.setCancelable(false);
				allLoaDialog.show();
				new allUpLoadAsyncTask().executeOnExecutor(cacheThreadPool,littleList);
			}else{
				Toast.makeText(this, "网络未连接", Toast.LENGTH_SHORT).show();
			}
			break;
		}
	}

	@Override
	public void onItemSelected(AdapterView<?> arg0, View arg1, int arg2,
			long arg3) {
		// TODO 自动生成的方法存根
		Spinner_str = (String) arg0.getAdapter().getItem(arg2);
		String date = formatter.format(new Date(System.currentTimeMillis()));
		selectDoing();
	}

	@Override
	public void onNothingSelected(AdapterView<?> arg0) {
		// TODO 自动生成的方法存根

	}

	public void selectDoing(){
		if (Spinner_str.equals("不限")) {
			mylist.clear();
			mylist.addAll(DJlist);
			DJadapter.setData(mylist);
			if (mylist.size() > 0) {
				todayTextview.setVisibility(View.GONE);
			} else {
				todayTextview.setVisibility(View.VISIBLE);
			}
		} else if (Spinner_str.equals("未上传")) {
			mylist.clear();
			for (int i = 0; i < DJlist.size(); i++) {
				if (Integer.parseInt(DJlist.get(i).get(DataBaseHelper.DJType).toString()) == -1) {
					mylist.add(DJlist.get(i));
				}
			}
			DJadapter.setData(mylist);
			if (mylist.size() > 0) {
				todayTextview.setVisibility(View.GONE);
			} else {
				todayTextview.setVisibility(View.VISIBLE);
			}

		} else if (Spinner_str.equals("已上传")) {

			mylist.clear();
			for (int i = 0; i < DJlist.size(); i++) {
				if (Integer.parseInt(DJlist.get(i).get(DataBaseHelper.DJType).toString()) == 1) {
					mylist.add(DJlist.get(i));
				}
			}
			DJadapter.setData(mylist);
			if (mylist.size() > 0) {
				todayTextview.setVisibility(View.GONE);
			} else {
				todayTextview.setVisibility(View.VISIBLE);
			}
		}else if(Spinner_str.equals("未完成")){
			mylist.clear();
			for (int i = 0; i < DJlist.size(); i++) {

				if (Integer.parseInt(DJlist.get(i).get(DataBaseHelper.DJType)
						.toString()) == 0) {
					mylist.add(DJlist.get(i));
				}
			}
			DJadapter.setData(mylist);
			if (mylist.size() > 0) {
				todayTextview.setVisibility(View.GONE);
			} else {
				todayTextview.setVisibility(View.VISIBLE);
			}
		}

	}
	
	@Override
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		Intent i = new Intent();
		Map<String, Object> map = (Map<String, Object>) arg0.getAdapter()
				.getItem(arg2);
		i.putExtra("HPM_ID", map.get(DataBaseHelper.HPM_ID).toString());
		// from的值等于1代表查看本地单据
		i.putExtra("from", 1);
		i.setClass(this, HistoryDJ_DetailsActivity.class);
		startActivity(i);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO 自动生成的方法存根
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == 1) {
			if (resultCode == 1) {
				conditionList.clear();
				String sql = null;
				String fromtime = data.getStringExtra("fromtime");
				String totime = data.getStringExtra("totime");
				sql = " where  " + DataBaseHelper.MVDT + ">='" + fromtime
						+ "'  and " + DataBaseHelper.MVDT + "<='"
						+ totime + "' ";
				conditionList.add(fromtime + "至" + totime);

				int ckid = data.getIntExtra("ckid", -1);
				String ckmc = data.getStringExtra("ckmc");
				if (ckid != -1) {
					sql = sql + " and " + DataBaseHelper.CKID + " = " + ckid
							+ " ";
					conditionList.add("仓库:" + ckmc);
				}

				String wherestr = "";
				if (data.getBooleanExtra("ruku_flag", false)) {
					wherestr = " and (" + DataBaseHelper.mType + " = 1 ";
					
					conditionList.add("入库单据");
				}
				if (data.getBooleanExtra("chuku_flag", false)) {
					if (wherestr.equals("")) {
						wherestr = " and (" + DataBaseHelper.mType + " = 2 ";
						
						conditionList.add("出库单据");
					} else {
						wherestr = wherestr + " or " + DataBaseHelper.mType
								+ " = 2 ";
						
						conditionList.add("出库单据");
					}
				}
				if (data.getBooleanExtra("pandian_flag", false)) {
					if (wherestr.equals("")) {
						wherestr = " and " + DataBaseHelper.mType + " = 0 ";
						
						conditionList.add("盘点单据");
					} else {
						wherestr = wherestr + " or " + DataBaseHelper.mType
								+ " = 0 )";
						
						conditionList.add("盘点单据");
					}
				} else {
					if (!wherestr.equals("")) {
						wherestr = wherestr + " )";
					}
				}

				String dh = data.getStringExtra("dh");
				if (!dh.equals("不限")) {
					sql = sql + " and " + DataBaseHelper.MVDH + " = '" + dh
							+ "' ";
					
					conditionList.add("单号:" + dh);
				}

				sql = sql + wherestr + " order by lrsj desc ";
				
				mTagAdapter.setData(conditionList);
				
				DJlist = dm_op.search_DJ(sql, str1);
				mylist.clear();
				if(Spinner_str.equals("不限")){
					mylist.addAll(DJlist);
				}else if(Spinner_str.equals("未上传")){
					if(DJlist.size()>0){
						for(int i=0;i<DJlist.size();i++){
							Map<String,Object> map = DJlist.get(i);
							if(Integer.parseInt((String) map.get(DataBaseHelper.DJType))==-1){
								mylist.add(map);
							}
						}	
					}
				}else if(Spinner_str.equals("已上传")){
					if(DJlist.size()>0){
						for(int i=0;i<DJlist.size();i++){
							Map<String,Object> map = DJlist.get(i);
							if(Integer.parseInt((String) map.get(DataBaseHelper.DJType))==1){
								mylist.add(map);
							}
						}	
					}
				}else if(Spinner_str.equals("未完成")){
					if(DJlist.size()>0){
						for(int i=0;i<DJlist.size();i++){
							Map<String,Object> map = DJlist.get(i);
							if(Integer.parseInt((String) map.get(DataBaseHelper.DJType))==0){
								mylist.add(map);
							}
						}	
					}
				}
				DJadapter.setData(mylist);
				if (mylist.size() > 0) {
					todayTextview.setVisibility(View.GONE);
				} else {
					todayTextview.setVisibility(View.VISIBLE);
				}
			}
		}
	}

	private int dp2px(int dp) {
		return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,
				getResources().getDisplayMetrics());
	}

	class allUpLoadAsyncTask extends AsyncTask<List<Map<String,Object>>, Integer, Void>{
		int progress = 0;
		int success = 0;
		int fail = 0;
		@Override
		protected Void doInBackground(List<Map<String,Object>>... params){
			// TODO 自动生成的方法存根
			ListIterator<Map<String, Object>> it=params[0].listIterator();
			while(it.hasNext()){
				progress++;
				Map<String, Object> map = it.next();
				String thisDJid = map.get(DataBaseHelper.HPM_ID).toString();
				String[] values_movem = new String[strs1.length];
				List<Map<String, Object>> ls2 = dm_op.Gt_Movem(thisDJid, strs1);
				if (ls2 != null) {
					for (int j = 0; j < strs1.length; j++) {
						values_movem[j] = (String) ls2.get(0).get(strs1[j]);
					}
				}
				List<Map<String, Object>> lss = dm_op.Gt_Moved(thisDJid, strs3);
				String[] values_moved = new String[lss.size() * strs3.length];
				for (int j = 0; j < lss.size(); j++) {
					for (int n = 0; n < strs3.length; n++) {
						values_moved[j * strs3.length + n] = (String) lss.get(j)
								.get(strs3[n]);
					}
				}
				int flag = -1;
				try {
					String type = (String) ls2.get(0).get(DataBaseHelper.mType);
					switch (Integer.parseInt(type)) {
					case 0:
						flag = WebserviceImport.AddDJ(values_movem, strs2,
								values_moved, strs4, WebserviceHelper.AddPD,mSharedPreferences);
						break;
					case 1:
						flag = WebserviceImport.AddDJ(values_movem, strs2,
								values_moved, strs4, WebserviceHelper.AddRK,mSharedPreferences);
						break;
					case 2:
						flag = WebserviceImport.AddCK(values_movem, strs2,
								values_moved, strs4, false,mSharedPreferences);
						break;

					}
				} catch (Exception e) {
					flag = -1;
				}
				if (flag > 0) {
					dm_op.Update_DJtype(thisDJid, 1);// type 0代表没有保存，1代表上传和保存本地，-1代表保存本地没上传
					map.put(DataBaseHelper.DJType,1);
					it.set(map);
				} else {
					dm_op.Update_DJtype(thisDJid, -1);
					map.put(DataBaseHelper.DJType,-1);
					it.set(map);
				}
				publishProgress(flag);
			}
			return null;
		}
		protected void onProgressUpdate(Integer[] values) {
			if(values[0]>0){
				success +=1;
			}else{
				fail +=1;
			}
			allLoaDialog.setProgress(GtProgress(progress, DJlist.size()));
		};
		protected void onPostExecute(Void result) {
			allLoaDialog.dismiss();
			AlertDialog.Builder builder = new AlertDialog.Builder(History_DJActivity.this);
			if(progress>0){
				if(fail>0){
					builder.setMessage("上传成功"+success+"笔单据，上传失败"+fail+"笔单据。失败的的单据请单独上传！");
				}else{
					builder.setMessage("单据全部上传成功");
				}
			}else{
				builder.setMessage("当前条件下，没有可以上传的单据！");
			}
			builder.setPositiveButton("确认",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog,
								int which) {
							// TODO Auto-generated method stub
							dialog.dismiss();
						}
					});
			builder.create().show();
			selectDoing();
		};
	};
	
	private int GtProgress(int now, int total) {
		if (now == total) {
			return 100;
		} else {
			return now * 100 / total;
		}
	}
	
	@Override
	public boolean onMenuItemClick(int position, SwipeMenu menu, int index) {
		// TODO 自动生成的方法存根
		Map<String, Object> map = mylist.get(position);
		switch (menu.getViewType()) {
		case 1:
			switch (index) {
			case 0:
				dm_op.Del_Moved(map.get(DataBaseHelper.HPM_ID).toString());
				dm_op.Del_Movem(map.get(DataBaseHelper.HPM_ID).toString());
				mylist.remove(map);
				DJlist.remove(map);
				DJadapter.setData(mylist);
				break;
			}
			break;
		case -1:
			switch (index) {
			case 0:
//				if(mSharedPreferences.getInt(ShareprefenceBean.IS_LOGIN, -1)==1){
					if(WebserviceImport.isOpenNetwork(this)){
						String s1="",s2="",s3="";
						if(RightsHelper.isHaveRight(RightsHelper.dj_rk_add,mSharedPreferences)==false){
							s1="入库单据  ";
						}
						if(RightsHelper.isHaveRight(RightsHelper.dj_ck_add,mSharedPreferences)==false){
							s2="出库单据  ";
						}
						if(RightsHelper.isHaveRight(RightsHelper.dj_pd_add,mSharedPreferences)==false){
							s3="盘点单据";
						}
						if(s1.equals("")&&s2.equals("")&&s3.equals("")){
							dialog1=ProgressDialog.show(this,null, "正在上传数据");
							uploadDJID=map.get(DataBaseHelper.HPM_ID).toString();
							op_type=Integer.valueOf(map.get(DataBaseHelper.mType).toString());
							ckid=Integer.valueOf(map.get(DataBaseHelper.CKID).toString());
							dh=map.get(DataBaseHelper.MVDH).toString();
							if(map.get(DataBaseHelper.actType)!=null){
								dacttype=map.get(DataBaseHelper.actType).toString();
							}
							cacheThreadPool.execute(addRun);
//							if(map.get(DataBaseHelper.DJType).equals("-1")){
//								
//							}else if(map.get(DataBaseHelper.DJType).equals("1")){
//								Toast.makeText(this, "单据已上传", Toast.LENGTH_SHORT).show();
//							}else if(map.get(DataBaseHelper.DJType).equals("0")){
//								Toast.makeText(this, "请完成单据在上传", Toast.LENGTH_SHORT).show();
//							}
						}else{
							AlertDialog.Builder builder=new AlertDialog.Builder(History_DJActivity.this);
							builder.setMessage("对不起，你没有"+s1+s2+s3+"的添加权限。");
							builder.setNegativeButton("确认", new DialogInterface.OnClickListener(){
								@Override
								public void onClick(DialogInterface dialog, int which) {
									// TODO Auto-generated method stub
									dialog.dismiss();
								}
							});
							builder.create().show();
						}
					}else{
						Toast.makeText(this, "网络未连接……", Toast.LENGTH_SHORT).show();
					}
//				}else{
//					Toast.makeText(this, "请先在线登陆账号", Toast.LENGTH_SHORT).show();
//				}
				break;
			case 1:
				dm_op.Del_Moved(map.get(DataBaseHelper.HPM_ID).toString());
				dm_op.Del_Movem(map.get(DataBaseHelper.HPM_ID).toString());
				mylist.remove(map);
				DJlist.remove(map);
				DJadapter.setData(mylist);
				break;
			}
			break;
		case 0:
			Intent intent = new Intent();
			switch (index) {
			case 0:
				switch (Integer.parseInt(map.get(DataBaseHelper.mType).toString())) {
				case 0:
					if (RightsHelper.isHaveRight(RightsHelper.dj_pd_add,mSharedPreferences) == true) {
						intent.setClass(this, PanDianActivity.class);
						startActivity(intent);
						finish();
					} else {
						Toast.makeText(this, "对不起，你没有的新增盘点的权限",
								Toast.LENGTH_SHORT).show();
					}
					break;
				case 1:
					if (RightsHelper.isHaveRight(RightsHelper.dj_rk_add,mSharedPreferences) == true) {
						intent.setClass(this, AddDJActivity.class);
						intent.putExtra("op_type", 1);// 入库单据
						startActivity(intent);
						finish();
					} else {
						Toast.makeText(this, "对不起，你没有的新增入库的权限",
								Toast.LENGTH_SHORT).show();
					}
					break;
				case 2:
					if (RightsHelper.isHaveRight(RightsHelper.dj_ck_add,mSharedPreferences) == true) {
						intent.setClass(this, AddDJActivity.class);
						intent.putExtra("op_type", 2);// 出库单局
						startActivity(intent);
						finish();
					} else {
						Toast.makeText(this, "对不起，你没有的新增出库的权限",
								Toast.LENGTH_SHORT).show();
					}
					break;
				}
				break;
			case 1:
				dm_op.Del_Moved(map.get(DataBaseHelper.HPM_ID).toString());
				dm_op.Del_Movem(map.get(DataBaseHelper.HPM_ID).toString());
				mylist.remove(map);
				DJlist.remove(map);
				DJadapter.setData(mylist);
				break;
			}
			break;
		}
		return false;
	}

	
	Runnable addRun = new Runnable() {
		
		@Override
		public void run() {
			Message msg = new Message();
			String[] values_movem = new String[strs1.length];
			List<Map<String, Object>> ls2 = dm_op.Gt_Movem(uploadDJID, strs1);
			if (ls2 != null) {
				for (int j = 0; j < strs1.length; j++) {
					values_movem[j] = (String) ls2.get(0).get(strs1[j]);
				}
			}
			List<Map<String, Object>> lss = dm_op.Gt_Moved(uploadDJID, strs3);
			String[] values_moved = new String[lss.size() * strs3.length];
			for (int j = 0; j < lss.size(); j++) {
				for (int n = 0; n < strs3.length; n++) {
					values_moved[j * strs3.length + n] = (String) lss.get(j)
							.get(strs3[n]);
				}
			}
			int flag = -1;
			try {
				String type = (String) ls2.get(0).get(DataBaseHelper.mType);
				switch (Integer.parseInt(type)) {
				case 0:
					flag = WebserviceImport.AddDJ(values_movem, strs2,
							values_moved, strs4, WebserviceHelper.AddPD,mSharedPreferences);
					break;
				case 1:
					flag = WebserviceImport.AddDJ(values_movem, strs2,
							values_moved, strs4, WebserviceHelper.AddRK,mSharedPreferences);
					break;
				case 2:
					flag = WebserviceImport.AddCK(values_movem, strs2,
							values_moved, strs4, false,mSharedPreferences);
					break;

				}
			} catch (Exception e) {
				flag = -1;
			}
			if (flag > 0) {
				dm_op.Update_DJtype(uploadDJID, 1);// type
												// 0代表没有保存，1代表上传和保存本地，-1代表保存本地没上传
			} else {
				dm_op.Update_DJtype(uploadDJID, -1);
			}
			msg.what = flag;
			msg.setTarget(mHandler);
			mHandler.sendMessage(msg);
		}
	};
	
	Runnable addRun2 = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			
			Message msg = new Message();
			String[] values_movem = new String[strs1.length];
			List<Map<String, Object>> ls2 = dm_op.Gt_Movem(uploadDJID, strs1);
			if (ls2 != null) {
				for (int j = 0; j < strs1.length; j++) {
					values_movem[j] = (String) ls2.get(0).get(strs1[j]);
				}
			}
			List<Map<String, Object>> lss = dm_op.Gt_Moved(uploadDJID, strs3);
			String[] values_moved = new String[lss.size() * strs3.length];
			for (int j = 0; j < lss.size(); j++) {
				for (int n = 0; n < strs3.length; n++) {
					values_moved[j * strs3.length + n] = (String) lss.get(j)
							.get(strs3[n]);
				}
			}
			int flag;
			try {
				String type = (String) ls2.get(0).get(DataBaseHelper.mType);
				switch (Integer.parseInt(type)) {
				case 0:
					flag = WebserviceImport.AddDJ(values_movem, strs2,
							values_moved, strs4, WebserviceHelper.AddPD,mSharedPreferences);
					break;
				case 1:
					flag = WebserviceImport.AddDJ(values_movem, strs2,
							values_moved, strs4, WebserviceHelper.AddRK,mSharedPreferences);
					break;
				case 2:
					flag = WebserviceImport.AddCK(values_movem, strs2,
							values_moved, strs4, true,mSharedPreferences);
					break;
				default:
					flag = -1;
					break;
				}
			} catch (Exception e) {
				flag = -1;
			}
			if (flag > 0) {
				dm_op.Update_DJtype(uploadDJID, 1);// type
												// 0代表没有保存，1代表上传和保存本地，-1代表保存本地没上传
			} else {
				dm_op.Update_DJtype(uploadDJID, -1);
			}
			msg.what = flag;
			msg.setTarget(mHandler);
			mHandler.sendMessage(msg);
		}
	};
	Handler viewgoneHandler = new Handler(){
		
		public void handleMessage(Message msg) {
			Animation alpAnimation = AnimationUtils.loadAnimation(History_DJActivity.this, R.anim.alpha_scale);
			alpAnimation.setFillAfter(true);
			alpAnimation.setAnimationListener(new AnimationListener() {
				
				@Override
				public void onAnimationStart(Animation animation) {
					// TODO 自动生成的方法存根
					
				}
				
				@Override
				public void onAnimationRepeat(Animation animation) {
					// TODO 自动生成的方法存根
					
				}
				
				@Override
				public void onAnimationEnd(Animation animation) {
					// TODO 自动生成的方法存根
					promptTextView.setVisibility(View.GONE);
				}
			});
			promptTextView.startAnimation(alpAnimation);
		};
	};
	Handler mHandler = new Handler() {
		public void handleMessage(Message msg) {
			dialog1.dismiss();
			if (msg.what > 0) {
				for(int i = 0;i <mylist.size();i++){
					if(mylist.get(i).get(DataBaseHelper.HPM_ID).toString().equals(uploadDJID)){
						mylist.get(i).put(DataBaseHelper.DJType,1);
						break;
					}
				}
				DJadapter.setData(mylist);
				uploadDJID="";
			} else if (msg.what == -501) {
				AlertDialog.Builder builder = new AlertDialog.Builder(
						History_DJActivity.this);
				builder.setMessage("有货品不足，是否继续出库？");
				builder.setNegativeButton("允许出库",
						new DialogInterface.OnClickListener() {
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								// TODO Auto-generated method stub
								dialog.dismiss();
								if(WebserviceImport.isOpenNetwork(History_DJActivity.this)){
									dialog1 = ProgressDialog.show(
											History_DJActivity.this, null, "正在上传数据");
									cacheThreadPool.execute(addRun2);
								}else{
									Toast.makeText(History_DJActivity.this, "网络未连接", Toast.LENGTH_SHORT).show();
								}
							}
						});
				builder.setPositiveButton("禁止出库",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								// TODO Auto-generated method stub
								Intent intent = new Intent(History_DJActivity.this, DJMXCheckActivity.class);
								intent.putExtra("op_type", op_type);
								intent.putExtra("djid", uploadDJID);
								intent.putExtra("ckid", ckid);
								intent.putExtra("dh", dh);
								intent.putExtra("dacttype", dacttype);
								startActivity(intent);
								dialog.dismiss();
							}
						});
				builder.create().show();
			}else if(msg.what==-502){
				AlertDialog.Builder builder=new AlertDialog.Builder(History_DJActivity.this);
				builder.setMessage("账面数有误,请修改盘点单后再上传。");
				builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO 自动生成的方法存根
						dialog.dismiss();
					}
				});
				builder.setPositiveButton("修改账面数", new DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO 自动生成的方法存根
						Intent intent = new Intent(History_DJActivity.this, DJMXCheckActivity.class);
						intent.putExtra("op_type", op_type);
						intent.putExtra("djid", uploadDJID);
						intent.putExtra("ckid", ckid);
						intent.putExtra("dh", dh);
						intent.putExtra("dacttype", dacttype);
						startActivity(intent);
					}
				});
				builder.create().show();
			}else{
				AlertDialog.Builder builder = new AlertDialog.Builder(
						History_DJActivity.this);
				switch (msg.what) {
				case -101:
					builder.setMessage("仓库信息有误,请更新仓库信息后再上传。");
					break;
				case -102:
					builder.setMessage("出入库类型有误,请更新参数信息后再上传。");
					break;
				case -103:
					builder.setMessage("单号已存在,请修改单号后再上传。");
					break;
				case -104:
					builder.setMessage("单据日期错误,禁止插入单据,请修改单据后再上传。");
					break;
				case -500:
					builder.setMessage("库存不足,禁止出库,请修改单据后再上传。");
					break;
				case -3:
					builder.setMessage("帐号信息验证错误。");
					break;
				case -2:
					builder.setMessage("权限不足,不能上传单据。");
					break;
				case -10:
					builder.setMessage("服务端异常。");
					break;
				default:
					builder.setMessage("提交失败");
					break;
				}
				builder.setPositiveButton("确定",
						new DialogInterface.OnClickListener() {
					
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								// TODO Auto-generated method stub
								dialog.dismiss();
							}
						});
				builder.create().show();
			}
		};
	};
}
